module auto_config_agent {

    yang-version "1";

    // namespace
    namespace "urn:srl_test/auto-config-agent";

    prefix "auto_config_agent";

    import srl_nokia-common {
        prefix srl_nokia-comm;
    }

    // Note that this module needs to be in the path for source-directories
    import srl_nokia-extensions {
      prefix srl_nokia-ext;
    }

    revision "2021-04-11" {
        description "Initial revision";
        reference "TBD";
    }

    grouping auto-config-agent-top {
        description "Top level grouping for auto config agent sample app";

        container auto-config-agent {
            presence "Auto-config agent parameters";
            description "Top level enclosing container for auto config agent sample app
                         config and operational state data";

            leaf evpn-overlay-as {
                description "iBGP AS number to use for the EVPN overlay, should not overlap with underlay";
                type uint32;
                default 65534;    // 65535 SHOULD NOT be used because of overlap with special communities
                // default 65000; // Use 2-byte AS for easier RT interop
                // see https://www.ipspace.net/Data_Center_BGP/EVPN_Route_Target_Considerations

                must ". != 65535" {
                  error-message "Private AS 65535 overlaps with certain reserved communities and SHOULD NOT be used";
                }
            }
            leaf base-as {
                description "Baseline 2-byte or 4-byte Autonomous System to auto-assign for EBGP";
                // type srl_nokia-comm:as-number;
                type uint32;

                default 4200000000; // Superspines get this, each leaf gets base+1+rank
            }
            leaf leaf-as {
                description "AS to use for leaves, 0=auto (eBGP)";
                // type srl_nokia-comm:as-number;
                type uint32;
                default 0; // Default base+rank = eBGP
            }
            leaf host-as {
                description "AS to use for hosts, 0=same as leaf (iBGP)";
                // type srl_nokia-comm:as-number;
                type uint32;
                default 0; // could also vary this by port offset
            }

            container peerlinks {
               leaf prefix {
                 description "IPv4 prefix range to use for auto-assigned peering links /31";
                 type srl_nokia-comm:ipv4-prefix;
                 default "192.168.127.0/24"; // enough for 128 /31 links
               }
               leaf host-subnet-size {
                 description "Size of subnet to use towards hosts, default /31";
                 type uint8 {
                   range "24 .. 31";
                 }
                 default 31;
               }
               leaf host-enable-ipv6 {
                 description "Whether to enable IPv6 towards hosts, default True";
                 type boolean;
                 default true;
               }
               leaf reuse-overlay-ips {
                 description "Whether to use the same IP at every host peerlink";
                 type boolean;
                 default false;
               }
            }
            leaf loopbacks-prefix {
                description "IPv4 prefix range to use for auto-assigned loopback IPs /32";
                type srl_nokia-comm:ipv4-prefix;

                default "1.1.0.0/22"; // spines get 1.1.0.x, leaves 1.1.1.x
            }
            leaf max-spine-ports {
                description "Maximum number of active ports on spines, controls IP link addressing; must match across fabric";
                type uint8;
                default 8; // Higher values require a larger peerlinks-prefix space
            }
            leaf max-leaves {
                description "Maximum number of leafs, controls AS allocation; must match across fabric";
                type uint16;
                default 16; // Currently only affects max AS that spines accept BGP peering from
            }
            leaf max-hosts-per-leaf {
                description "Maximum number of host ports per leaf, controls IP allocation; must match across fabric";
                type uint16;
                default 4; // Too high -> out of peer link IP space
            }
            leaf max-lag-links {
                description "Maximum number of links in a LAG bundle, controls IP allocation; must match across fabric";
                type uint8;
                default 4; // Too high -> out of peer link IP space
            }
            leaf evpn {
                description "BGP EVPN control plane model to use for VXLAN endpoints";
                type enumeration {
                  enum asymmetric-irb;
                  enum symmetric-irb;
                  enum disabled;
                }
                default "disabled";
            }
            leaf evpn-rr {
                description "Where to run an EVPN Route Reflector, defaults to the top node(s) as determined dynamically";
                type union {
                 type string {  // List of router IDs, slightly simplified pattern
                  pattern '[0-9]{1,3}(\.[0-9]{1,3}){3}([,][0-9]{1,3}(\.[0-9]{1,3}){3})*';
                 }
                 type enumeration {
                  enum auto-top-nodes;
                  enum spine;
                  enum superspine;
                  enum disabled;
                 }
                }
                default auto-top-nodes;
            }
            leaf igp {
                description "IGP to use for distributing loopback IPs";
                type enumeration {
                  enum bgp;
                  enum isis;
                  enum ospf; // could do both v2 and v3
                }
                default ospf; // v3
            }
            leaf use-bgp-unnumbered {
                description "Provision BGP unnumbered on fabric interfaces, using FRR agent";
                type boolean;
                default false;

                must ". = false() or ../igp = 'bgp'" {
                  error-message "Cannot use both BGP unnumbered and OSPFv3 or ISIS";
                }
            }
            leaf host-use-irb {
                description "Use IRB interface for L2 service towards hosts";
                type boolean;
                default true;
            }
            leaf overlay-bgp-admin-state {
                description "admin-state for overlay BGP group, default 'enable'";
                type enumeration {
                  enum disable;
                  enum enable;
                }
                default enable;
            }
            leaf evpn-auto-lags {
                description "Discover and provision LAGs on leaves, using LLDP and EVPN communities";
                type enumeration {
                  enum encoded-ipv6; // LLDP data encoded as IPv6 loopback IPs
                  enum large-communities; // LLDP data encoded as communities
                  enum disabled;
                }
                default "encoded-ipv6";

                must ". = 'disabled' or ../evpn != 'disabled'" {
                  error-message "EVPN auto-LAG discovery requires EVPN to be enabled";
                }
            }
            leaf anycast-gw {
                description "IPv4 anycast gateway to provision";
                type srl_nokia-comm:ipv4-prefix-with-host-bits;
            }

            // info from state
            list leaf {
                key leaf-id;
                config false;

                leaf leaf-id {
                  type string;
                }
                container lldp {
                 srl_nokia-ext:delivery-node-override true;
                 presence "State LLDP operational parameters";

                 list port {
                  key port-name;
                  leaf port-name {
                    type string;
                  }
                  container neighbor {
                   srl_nokia-ext:delivery-node-override true;
                   presence "State LLDP neighbor operational parameters";
                   leaf host-name {
                    type string;
                   }
                  }
                 }
                }
            }
        }
    }

    // data definition statements
    uses auto-config-agent-top;
}
